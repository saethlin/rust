- // MIR for `cycle` before DeadStoreElimination-initial
+ // MIR for `cycle` after DeadStoreElimination-initial
  
  fn cycle(_1: i32, _2: i32, _3: i32) -> () {
      debug x => _1;
      debug y => _2;
      debug z => _3;
      let mut _0: ();
      let mut _4: ();
      let mut _5: bool;
      let _6: i32;
      let mut _7: i32;
      let mut _8: i32;
      let mut _9: i32;
      let mut _10: !;
      let _11: ();
      let mut _12: !;
      scope 1 {
          debug temp => _6;
      }
  
      bb0: {
          goto -> bb1;
      }
  
      bb1: {
          StorageLive(_5);
          _5 = cond() -> [return: bb2, unwind continue];
      }
  
      bb2: {
          switchInt(move _5) -> [0: bb4, otherwise: bb3];
      }
  
      bb3: {
          StorageLive(_6);
-         _6 = _3;
+         nop;
          StorageLive(_7);
-         _7 = _2;
-         _3 = move _7;
+         nop;
+         nop;
          StorageDead(_7);
          StorageLive(_8);
-         _8 = _1;
-         _2 = move _8;
+         nop;
+         nop;
          StorageDead(_8);
          StorageLive(_9);
-         _9 = _6;
-         _1 = move _9;
+         nop;
+         nop;
          StorageDead(_9);
-         _4 = const ();
+         nop;
          StorageDead(_6);
          StorageDead(_5);
          goto -> bb1;
      }
  
      bb4: {
          StorageLive(_11);
          _0 = const ();
          StorageDead(_11);
          StorageDead(_5);
          return;
      }
  }
  
